#!/usr/bin/env ruby

require 'optparse'
require 'ostruct'
require 'shellwords'
require 'yaml'

VERSION = '0.1.0'
DEFAULT_SEARCH_PATH = [
    File.expand_path('pullup.yml', Dir.pwd),
    File.expand_path('pullup.yaml', Dir.pwd),
    File.expand_path('~/.pullup.yml'),
    File.expand_path('~/.pullup.yaml'),
]

class Array
  def split(sep)
    return self.take_while { |i| i != sep },
           self.drop_while { |i| i != sep }[1..-1] || []
  end
end


def first_found(files)
  files.compact.each { |file|
    return file if File.exists? file
  }
  nil
end


def parse_config(file)
    begin
      YAML.load_file file
    rescue Psych::SyntaxError => e
      abort "invalid configuration file #{e.to_s}"
    end
end


class CLI
  def initialize
    @options = OpenStruct.new
    @args = []
    @remainder = []
  end

  def parse_args(args)
    @options.verbose = false

    parser = OptionParser.new do |opts|
      opts.program_name = File.basename $0
      opts.summary_width = 20
      opts.banner = "#{opts.program_name} [OPTIONS] -- [ANSIBLE OPTIONS...]"
      opts.version = VERSION
      opts.separator <<EOT

`ansible-pullup` is a simple a simple wrapper around `ansible-pull` that makes
it easy to localize configurations.

Any options specified after `--` will be passed to `ansible-pull`.

EOT
      opts.separator 'Options:'

      opts.on '-f', '--file [FILE]', 'Pullup configuration file', 'By default, check the following paths in order:', *DEFAULT_SEARCH_PATH do |file|
        @options.config_file = File.absolute_path(file)
      end

      opts.on_tail '-h', '--help', 'Print this message' do
        puts opts
        exit
      end

      opts.on_tail '-V', '--version', 'Print version' do
        puts "#{opts.program_name} #{opts.version}"
        exit
      end
    end

    parser.parse!(args)
  end

  def ansible_pull(repo, tags, config, extra_vars, *args)
    command = %w(ansible-pull -i localhost)
    if repo
      command.push '-U', repo
    end
    unless tags.empty?
      command.push '-t', tags.join(',')
    end
    command.push '-e', "@#{config}"
    extra_vars.each { |k, v|
      command.push '-e', "#{k}=#{v}"
    }
    command.push(*args)
    exec command.shelljoin
  end

  def run(args)
    @args, @remainder = args.split '--'
    self.parse_args(@args)

    files = DEFAULT_SEARCH_PATH.unshift(@options.config_file)
    config_file = first_found(files)

    unless config_file then
      abort 'cannot find configuration file'
    end

    config = parse_config(config_file)

    tags = config['pullup_tags'] || []
    repo = config['pullup_repo']
    extra_vars = {}

    hooks = %w(pre_apply post_apply)
    hooks.each { |hook|
      play_var = "pullup_#{hook}_play"
      play = config[play_var]
      if play then
        play = File.expand_path(play, File.dirname(config_file))
        extra_vars[play_var] = play
      end
    }

    ansible_pull repo, tags, config_file, extra_vars, *@remainder
  end
end


cli = CLI.new()
cli.run(ARGV)
